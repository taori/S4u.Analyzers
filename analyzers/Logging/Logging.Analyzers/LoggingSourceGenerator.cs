using System;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;

namespace Logging.Analyzers;

/// <summary>
/// A sample source generator that creates C# classes based on the text file (in this case, Domain Driven Design ubiquitous language registry).
/// When using a simple text file as a baseline, we can create a non-incremental source generator.
/// </summary>
[Generator]
public class LoggingSourceGenerator : IIncrementalGenerator
{
	public void Initialize(GeneratorInitializationContext context)
	{
		// No initialization required for this generator.
	}

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var dddRegister = context.AdditionalTextsProvider
            .Where(d => Path.GetFileName(d.Path).Equals("DDD.UbiquitousLanguageRegistry.txt", StringComparison.OrdinalIgnoreCase))
            .Collect();
		context.RegisterSourceOutput(dddRegister, CreateDDDEntities);
    }

    private void CreateDDDEntities(SourceProductionContext context, ImmutableArray<AdditionalText> additionalTexts)
    {
        if (additionalTexts.Length == 0)
            return;

        var text = additionalTexts.First().GetText();
        if (text == null)
            return;

        foreach (var line in text.Lines)
        {
            var className = line.ToString().Trim();

            // Build up the source code.
            string source = $@"// <auto-generated/>

namespace Entities
{{
    public partial class {className}
    {{
    }}
}}
";

            // Add the source code to the compilation.
            context.AddSource($"{className}.g.cs", source);
        }
    }
}