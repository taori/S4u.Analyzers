<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<IsPackable>true</IsPackable>
		<Nullable>enable</Nullable>
		<LangVersion>latest</LangVersion>

		<EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
		<IsRoslynComponent>true</IsRoslynComponent>

		<RootNamespace>S4u.Analyzers</RootNamespace>
		<AssemblyName>S4u.Analyzers</AssemblyName>
		<GeneratePackageOnBuild>false</GeneratePackageOnBuild>
	</PropertyGroup>
	
	<PropertyGroup Condition="'$(Configuration)' == 'Release'">
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>		
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4" IncludeInPackage="false">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.3.0" PrivateAssets="all" IncludeInPackage="false" />
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.3.0" PrivateAssets="all" IncludeInPackage="false" />
		<PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="8.0.0" PrivateAssets="all" IncludeInPackage="false"/>
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Update="Resources.resx">
			<Generator>ResXFileCodeGenerator</Generator>
			<LastGenOutput>Resources.Designer.cs</LastGenOutput>
		</EmbeddedResource>
	</ItemGroup>

	<ItemGroup>
		<Compile Update="Resources.Designer.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>Resources.resx</DependentUpon>
		</Compile>
	</ItemGroup>

	<!-- 👇 Add a new target that runs before the task that lists all the files to include in the NuGet package.
					This task must run after the packages resolution target -->
	<Target Name="AddNuGetDlls" BeforeTargets="_GetPackageFiles">
<!--	<Target Name="PackTask" BeforeTargets="_GetPackageFiles">-->
		<!-- Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.
				 This produces a new list containing the DLL path and the "IncludeInPackage" metadata-->
		<Message Importance="High" Text="Why does this not work?" />
		<JoinItems Left="@(ResolvedCompileFileDefinitions)" LeftKey="NuGetPackageId" LeftMetadata="*"
							 Right="@(PackageReference)" RightKey="" RightMetadata="*"
							 ItemSpecToUse="Left">
			<Output TaskParameter="JoinResult" ItemName="_PackagesToPack" />
		</JoinItems>

		<ItemGroup>
			<!-- Remove NETStandard DLLs -->
			<_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(NuGetPackageId) == 'NETStandard.Library'" />
			<_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(_PackagesToPack.IncludeInPackage) != 'true'" />
		</ItemGroup>

		<Message Importance="High" Text="Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')" />

		<ItemGroup>
			<!-- Update the collection of items to pack with the DLLs from the NuGet packages -->
			<None Include="@(_PackagesToPack)"
						Pack="true"
						PackagePath="analyzers/dotnet/cs"
						Visible="false" />
			
			<Content Include="$(OutputPath)$(AssemblyName).dll"
						IncludeInPackage="True"
						Pack="True"
						PackagePath="analyzers/dotnet/cs" />
		</ItemGroup>
	</Target>
	
</Project>
